h1 タスクの詳細

= @station

.nav.justify-content-end
  = link_to 'タスク一覧', tasks_path, class: 'nav-link'

table.table.table-hover
  tbody
    tr
      th = Task.human_attribute_name(:name)
      td = @task.name

    tr
      th = Task.human_attribute_name(:deadline)
      td = @task.deadline

    / placeを保存している場合に表示する
    - if @task.place.present?
      tr
        th = Task.human_attribute_name(:place)
        td = @task.place
    tr
      th = Task.human_attribute_name(:description)
      td = auto_link(simple_format(h(@task.description), {}, sanitize: false, wrapper_tag: "div"))
    tr
      th = Task.human_attribute_name(:image)
      td = image_tag @task.image if @task.image.attached?
    tr
      th = Task.human_attribute_name(:created_at)
      td = @task.created_at.strftime("%Y-%m-%d %H:%M:%S")
    tr
      th = Task.human_attribute_name(:updated_at)
      td = @task.updated_at.strftime("%Y-%m-%d %H:%M:%S")
      
= link_to '編集', edit_task_path, class: 'btn btn-primary mr-3'
= link_to '削除', @task, method: :delete, data: { confirm: "タスク「#{@task.name}」を削除します。よろしいですか？" }, class: 'btn btn-danger'

/ placeが保存されている場合に表示する
- if @task.place.present?
  #map_content
    h2#tasks_place = "#{@task.place}周辺の地図"

    h3 = "最寄り駅：#{@station['line']} #{@station['name']}駅"
    
    / 場所を格納した変数をjavascriptに渡す
    #map data-place-id="#{{@task.place}}" data-station-lat="#{{@station_lat}}" data-station-lng="#{{@station_lng}}"

    javascript:
      document.addEventListener('turbolinks:load', function () {
        let map_element = document.getElementById('map');
        let place = map_element.getAttribute('data-place-id');
        console.log(place);

        var MyLatLng = new google.maps.LatLng(0, 0);
        var Options = {
        zoom: 15,              //地図の縮尺値
        center: MyLatLng,      //デフォルトの中心座標
        mapTypeId: 'roadmap'   //地図の種類
        };

        var map = new google.maps.Map(document.getElementById('map'), Options);    

        let geocoder = new google.maps.Geocoder();

        geocoder.geocode({"address": place }, function(results, status){
          if(status == google.maps.GeocoderStatus.OK){
            var lat = results[0].geometry.location.lat();
            var lng = results[0].geometry.location.lng();

            var mark = {
              lat: lat,
              lng: lng
            };
            marker1 = new google.maps.Marker({
              position: mark,
              map: map
            });

            // 最寄り駅の緯度経度にマーカーを配置
            let station_lat = parseFloat(map_element.getAttribute('data-station-lat'));
            let station_lng = parseFloat(map_element.getAttribute('data-station-lng'));
            stationLatLng = new google.maps.LatLng({lat: station_lat, lng: station_lng});
            marker2 = new google.maps.Marker({
              position: stationLatLng,
              map: map
            });

            var infoWindow1 = new google.maps.InfoWindow({ // 吹き出しの追加
              content: '<div class="sample">目的地</div>' // 吹き出しに表示する内容
            });
            marker1.addListener('click', function() { // マーカーをクリックしたとき
              infoWindow1.open(map, marker1); // 吹き出しの表示
            });

            var infoWindow2 = new google.maps.InfoWindow({ // 吹き出しの追加
              content: '<div class="sample">最寄り駅</div>' // 吹き出しに表示する内容
            });
            marker2.addListener('click', function() { // マーカーをクリックしたとき
              infoWindow2.open(map, marker2); // 吹き出しの表示
            });

            map.setCenter(mark);
          }
          else{
            map_element.parentNode.remove();
          }
        });
      });

      
      